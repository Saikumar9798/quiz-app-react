{"version":3,"sources":["Components/FetchButton.js","Components/Settings.js","Components/Question.js","Components/FinalScreen.js","Components/Header.js","Components/Footer.js","App.js","reportWebVitals.js","Reducer.js","index.js"],"names":["FetchButton","props","questionCategory","useSelector","state","options","question_category","questionDifficulty","question_difficulty","questionType","question_type","questionAmount","amount_of_questions","questionIndex","index","dispatch","useDispatch","setLoading","value","type","loading","handleQuery","a","apiUrl","length","concat","fetch","then","res","json","response","results","questions","score","onClick","text","Settings","useState","setOptions","useEffect","handleLoadingChange","trivia_categories","style","marginTop","onChange","event","target","map","option","id","name","decodeHTML","html","txt","document","createElement","innerHTML","Question","setQuestions","answerSelected","setAnswerSelected","selectedAnswer","setSelectedAnswer","encodedQuestions","decodedQuestions","q","question","correct_answer","incorrect_answers","answer","max","answers","splice","Math","floor","random","handleListItemClick","textContent","setTimeout","getClass","i","className","FinalScreen","Header","App","component","Footer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initState","Reducer","action","store","createStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.df2d0d92.chunk.js","sourcesContent":["import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nfunction FetchButton(props) {\n  const questionCategory = useSelector(\n    (state) => state.options.question_category\n  )\n  const questionDifficulty = useSelector(\n    (state) => state.options.question_difficulty\n  )\n  const questionType = useSelector((state) => state.options.question_type)\n  const questionAmount = useSelector(\n    (state) => state.options.amount_of_questions\n  )\n  const questionIndex = useSelector((state) => state.index)\n\n  const dispatch = useDispatch()\n\n  const setLoading = (value) => {\n    dispatch({\n      type: 'CHANGE_LOADING',\n      loading: value,\n    })\n  }\n\n  const setQuestions = (value) => {\n    dispatch({\n      type: 'SET_QUESTIONS',\n      questions: value,\n    })\n  }\n\n  const handleQuery = async () => {\n    let apiUrl = `https://opentdb.com/api.php?amount=${questionAmount}`\n\n    if (questionCategory.length) {\n      apiUrl = apiUrl.concat(`&category=${questionCategory}`)\n    }\n\n    if (questionDifficulty.length) {\n      apiUrl = apiUrl.concat(`&difficulty=${questionDifficulty}`)\n    }\n\n    if (questionType.length) {\n      apiUrl = apiUrl.concat(`&type=${questionType}`)\n    }\n\n    setLoading(true)\n\n    await fetch(apiUrl)\n      .then((res) => res.json())\n      .then((response) => {\n        setQuestions(response.results)\n        setLoading(false)\n      })\n\n    if (questionIndex > 0) {\n      dispatch({\n        type: 'SET_INDEX',\n        index: 0,\n      })\n\n      dispatch({\n        type: 'SET_SCORE',\n        score: 0,\n      })\n    }\n  }\n\n  return <button onClick={handleQuery}>{props.text}</button>\n}\nexport default FetchButton\n","import React, { useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport FetchButton from './FetchButton'\n\nfunction Settings() {\n  const [options, setOptions] = useState(null)\n\n  const loading = useSelector((state) => state.options.loading)\n\n  const questionCategory = useSelector(\n    (state) => state.options.question_category\n  )\n  const questionDifficulty = useSelector(\n    (state) => state.options.question_difficulty\n  )\n  const questionType = useSelector((state) => state.options.question_type)\n  const questionAmount = useSelector(\n    (state) => state.options.amount_of_questions\n  )\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    const apiUrl = `https://opentdb.com/api_category.php`\n\n    const handleLoadingChange = (value) => {\n      dispatch({\n        type: 'CHANGE_LOADING',\n        loading: value,\n      })\n    }\n\n    handleLoadingChange(true)\n\n    fetch(apiUrl)\n      .then((res) => res.json())\n      .then((response) => {\n        handleLoadingChange(false)\n        setOptions(response.trivia_categories)\n      })\n  }, [setOptions, dispatch])\n\n  const handleCategoryChange = (event) => {\n    dispatch({\n      type: 'CHANGE_CATEGORY',\n      question_category: event.target.value,\n    })\n  }\n\n  const handleDifficultyChange = (event) => {\n    dispatch({\n      type: 'CHANGE_DIFFICULTY',\n      question_difficulty: event.target.value,\n    })\n  }\n\n  const handleTypeChange = (event) => {\n    dispatch({\n      type: 'CHANGE_TYPE',\n      question_type: event.target.value,\n    })\n  }\n\n  const handleAmountChange = (event) => {\n    dispatch({\n      type: 'CHANGE_AMOUNT',\n      amount_of_questions: event.target.value,\n    })\n  }\n\n  if (!loading) {\n    return (\n      <div>\n        <div>\n          <h2 style={{ marginTop: '0' }}>Select Category:</h2>\n          <select value={questionCategory} onChange={handleCategoryChange}>\n            <option>All</option>\n            {options &&\n              options.length &&\n              options.map((option) => (\n                <option value={option.id} key={option.id}>\n                  {option.name}\n                </option>\n              ))}\n          </select>\n        </div>\n\n        <div>\n          <h2>Select Difficulty:</h2>\n          <select value={questionDifficulty} onChange={handleDifficultyChange}>\n            <option value=\"\" key=\"difficulty-0\">\n              All\n            </option>\n            <option value=\"easy\" key=\"difficulty-1\">\n              Easy\n            </option>\n            <option value=\"medium\" key=\"difficulty-2\">\n              Medium\n            </option>\n            <option value=\"hard\" key=\"difficulty-3\">\n              Hard\n            </option>\n          </select>\n        </div>\n\n        <div>\n          <h2>Select Question Type:</h2>\n          <select value={questionType} onChange={handleTypeChange}>\n            <option value=\"\" key=\"type-0\">\n              All\n            </option>\n            <option value=\"multiple\" key=\"type-1\">\n              Multiple Choice\n            </option>\n            <option value=\"boolean\" key=\"type-2\">\n              True/False\n            </option>\n          </select>\n        </div>\n\n        <div>\n          <h2>Amount of Questions:</h2>\n          <input value={questionAmount} onChange={handleAmountChange} />\n        </div>\n\n        <FetchButton text=\"Get started!\" />\n      </div>\n    )\n  }\n\n  return <p>LOADING...</p>\n}\nexport default Settings\n","import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nconst decodeHTML = function (html) {\n  const txt = document.createElement('textarea')\n  txt.innerHTML = html\n  return txt.value\n}\n\nfunction Question() {\n  const [questions, setQuestions] = useState([])\n  const [answerSelected, setAnswerSelected] = useState(false)\n  const [selectedAnswer, setSelectedAnswer] = useState(null)\n  const [options, setOptions] = useState([])\n\n  const score = useSelector((state) => state.score)\n  const encodedQuestions = useSelector((state) => state.questions)\n\n  useEffect(() => {\n    const decodedQuestions = encodedQuestions.map((q) => {\n      return {\n        ...q,\n        question: decodeHTML(q.question),\n        correct_answer: decodeHTML(q.correct_answer),\n        incorrect_answers: q.incorrect_answers.map((a) => decodeHTML(a)),\n      }\n    })\n\n    setQuestions(decodedQuestions)\n  }, [encodedQuestions])\n  const questionIndex = useSelector((state) => state.index)\n\n  const dispatch = useDispatch()\n\n  const question = questions[questionIndex]\n  const answer = question && question.correct_answer\n\n  const getRandomInt = (max) => {\n    return Math.floor(Math.random() * Math.floor(max))\n  }\n\n  useEffect(() => {\n    if (!question) {\n      return\n    }\n    let answers = [...question.incorrect_answers]\n    answers.splice(\n      getRandomInt(question.incorrect_answers.length),\n      0,\n      question.correct_answer\n    )\n\n    setOptions(answers)\n  }, [question])\n\n  const handleListItemClick = (event) => {\n    setAnswerSelected(true)\n    setSelectedAnswer(event.target.textContent)\n\n    if (event.target.textContent === answer) {\n      dispatch({\n        type: 'SET_SCORE',\n        score: score + 1,\n      })\n    }\n\n    if (questionIndex + 1 <= questions.length) {\n      setTimeout(() => {\n        setAnswerSelected(false)\n        setSelectedAnswer(null)\n\n        dispatch({\n          type: 'SET_INDEX',\n          index: questionIndex + 1,\n        })\n      }, 2500)\n    }\n  }\n\n  /*\n    {\n      \"category\": \"Entertainment: Video Games\",\n      \"type\": \"boolean\",\n      \"difficulty\": \"easy\",\n      \"question\": \"Peter Molyneux was the founder of Bullfrog Productions.\",\n      \"correct_answer\": \"True\",\n      \"incorrect_answers\": [\n        \"False\"\n      ]\n    }\n  */\n\n  const getClass = (option) => {\n    if (!answerSelected) {\n      return ``\n    }\n\n    if (option === answer) {\n      return `correct`\n    }\n\n    if (option === selectedAnswer) {\n      return `selected`\n    }\n  }\n\n  if (!question) {\n    return <div>Loading</div>\n  }\n\n  return (\n    <div>\n      <p id=\"question_number\">Question {questionIndex + 1}</p>\n      <h3>{question.question}</h3>\n      <ul>\n        {options.map((option, i) => (\n          <li\n            key={i}\n            onClick={handleListItemClick}\n            className={getClass(option)}\n          >\n            {option}\n          </li>\n        ))}\n      </ul>\n      <div>\n        Score: {score} / {questions.length}\n      </div>\n    </div>\n  )\n}\nexport default Question\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport FetchButton from './FetchButton'\n\nfunction FinalScreen() {\n  const score = useSelector((state) => state.score)\n\n  const dispatch = useDispatch()\n\n  const replay = () => {\n    dispatch({\n      type: 'SET_INDEX',\n      index: 0,\n    })\n\n    dispatch({\n      type: 'SET_SCORE',\n      score: 0,\n    })\n  }\n\n  const settings = () => {\n    dispatch({\n      type: 'SET_QUESTIONS',\n      questions: [],\n    })\n\n    dispatch({\n      type: 'SET_SCORE',\n      score: 0,\n    })\n  }\n\n  return (\n    <div>\n      <h3>Final Score: {score}</h3>\n      <button onClick={replay}>Try again</button>\n      <FetchButton text=\"Fetch new questions\" />\n      <button onClick={settings}>Back to settings</button>\n    </div>\n  )\n}\nexport default FinalScreen\n","import React from 'react';\r\nimport \"../App.css\"\r\n\r\nconst Header = () => {\r\n    return (\r\n      <div id=\"header\">\r\n        <h1>Quiz App</h1>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport '../App.css'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div id=\"footer\">\r\n      <h3>Made with ❤️ by Saikumar</h3>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import { useSelector } from 'react-redux'\n\nimport Settings from './Components/Settings'\nimport Question from './Components/Question'\nimport FinalScreen from './Components/FinalScreen'\n\nimport './App.css'\nimport Header from './Components/Header'\nimport Footer from './Components/Footer'\n\nfunction App() {\n  const questions = useSelector((state) => state.questions)\n  const questionIndex = useSelector((state) => state.index)\n\n  let component\n\n  if (questions.length && questionIndex + 1 <= questions.length) {\n    component = <Question />\n  } else if (!questions.length) {\n    component = <Settings />\n  } else {\n    component = <FinalScreen />\n  }\n\n  return (\n    <div id=\"main_container\">\n      <div id=\"header-body\">\n        <Header />\n        <div className=\"App\">\n          <div className=\"app-container\">{component}</div>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","const initState = {\n  options: {\n    loading: false,\n    question_category: ``,\n    question_difficulty: ``,\n    question_type: ``,\n    amount_of_questions: 5,\n  },\n  questions: [],\n  index: 0,\n  score: 0,\n}\n\nconst Reducer = (state = initState, action) => {\n  switch (action.type) {\n    case 'CHANGE_LOADING':\n      return {\n        ...state,\n        options: {\n          ...state.options,\n          loading: action.loading,\n        },\n      }\n\n    case 'CHANGE_CATEGORY':\n      return {\n        ...state,\n        options: {\n          ...state.options,\n          question_category: action.question_category,\n        },\n      }\n\n    case 'CHANGE_DIFFICULTY':\n      return {\n        ...state,\n        options: {\n          ...state.options,\n          question_difficulty: action.question_difficulty,\n        },\n      }\n\n    case 'CHANGE_TYPE':\n      return {\n        ...state,\n        options: {\n          ...state.options,\n          question_type: action.question_type,\n        },\n      }\n\n    case 'CHANGE_AMOUNT':\n      return {\n        ...state,\n        options: {\n          ...state.options,\n          amount_of_questions: action.amount_of_questions,\n        },\n      }\n\n    case 'SET_QUESTIONS':\n      return {\n        ...state,\n        questions: action.questions,\n      }\n\n    case 'SET_INDEX':\n      return {\n        ...state,\n        index: action.index,\n      }\n\n    case 'SET_SCORE':\n      return {\n        ...state,\n        score: action.score,\n      }\n\n    default:\n      return state\n  }\n}\n\nexport default Reducer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport Reducer from './Reducer'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\n\nconst store = createStore(Reducer)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}